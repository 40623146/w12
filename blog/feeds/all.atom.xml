<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Fall CADP&amp;CP (虎尾科大MDE)</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/" rel="alternate"></link><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/feeds/all.atom.xml" rel="self"></link><id>https://cpa.kmol.info/40623146/doc/trunk/blog/</id><updated>2017-11-02T11:00:00+08:00</updated><entry><title>2017 Fall CP 計算機程式第八週</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w8.html" rel="alternate"></link><published>2017-11-02T11:00:00+08:00</published><updated>2017-11-02T11:00:00+08:00</updated><author><name>40623146</name></author><id>tag:cpa.kmol.info,2017-11-02:/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w8.html</id><summary type="html">&lt;h3&gt;摘要&lt;/h3&gt;
</summary><content type="html">&lt;h3&gt;摘要&lt;/h3&gt;


&lt;h3&gt;內容&lt;/h3&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h3&gt;&lt;b&gt;上課內容:&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;###&lt;b&gt;自評成績:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;每週出席情況:100&lt;/p&gt;
&lt;p&gt;紙本筆記:65&lt;/p&gt;
&lt;p&gt;隨身碟內容:55&lt;/p&gt;
&lt;p&gt;個人倉儲內容:50&lt;/p&gt;
&lt;p&gt;各週上課摘要:60&lt;/p&gt;
&lt;p&gt;自評分數:65&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>2017 Fall CP 第六週</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w6.html" rel="alternate"></link><published>2017-10-19T11:00:00+08:00</published><updated>2017-10-19T11:00:00+08:00</updated><author><name>40623146</name></author><id>tag:cpa.kmol.info,2017-10-19:/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w6.html</id><summary type="html">&lt;h3&gt;摘要&lt;/h3&gt;
</summary><content type="html">&lt;h3&gt;摘要&lt;/h3&gt;


&lt;h3&gt;內容&lt;/h3&gt;
&lt;pre class:"brudh:pgthon"&gt;
!/usr/bin/env python

import math

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QGridLayout, QLayout, QLineEdit,
        QSizePolicy, QToolButton, QWidget)


class Button(QToolButton):
    '''
    def __init__(self, text, parent=None):
        super(Button, self).__init__(parent)
    '''
    # for Python 3
    def __init__(self, text):
        super().__init__()

        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.setText(text)

    def sizeHint(self):
        size = super(Button, self).sizeHint()
        size.setHeight(size.height() + 20)
        size.setWidth(max(size.width(), size.height()))
        return size


class Calculator(QWidget):
    NumDigitButtons = 10

    '''    
    def __init__(self, parent=None):
        super(Calculator, self).__init__(parent)
    '''
    def __init__(self):
        super().__init__()

        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''

        self.sumInMemory = 0.0
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.waitingForOperand = True

        self.display = QLineEdit('0')
        self.display.setReadOnly(True)
        self.display.setAlignment(Qt.AlignRight)
        self.display.setMaxLength(15)

        font = self.display.font()
        font.setPointSize(font.pointSize() + 8)
        self.display.setFont(font)

        self.digitButtons = []

        for i in range(Calculator.NumDigitButtons):
            self.digitButtons.append(self.createButton(str(i),
                    self.digitClicked))

        self.pointButton = self.createButton(".", self.pointClicked)
        self.changeSignButton = self.createButton(u"\N{PLUS-MINUS SIGN}",
                self.changeSignClicked)

        self.backspaceButton = self.createButton("Backspace",
                self.backspaceClicked)
        self.clearButton = self.createButton("Clear", self.clear)
        self.clearAllButton = self.createButton("Clear All", self.clearAll)

        self.clearMemoryButton = self.createButton("MC", self.clearMemory)
        self.readMemoryButton = self.createButton("MR", self.readMemory)
        self.setMemoryButton = self.createButton("MS", self.setMemory)
        self.addToMemoryButton = self.createButton("M+", self.addToMemory)

        self.divisionButton = self.createButton(u"\N{DIVISION SIGN}",
                self.multiplicativeOperatorClicked)
        self.timesButton = self.createButton(u"\N{MULTIPLICATION SIGN}",
                self.multiplicativeOperatorClicked)
        self.minusButton = self.createButton("-", self.additiveOperatorClicked)
        self.plusButton = self.createButton("+", self.additiveOperatorClicked)

        self.squareRootButton = self.createButton("Sqrt",
                self.unaryOperatorClicked)
        self.powerButton = self.createButton(u"x\N{SUPERSCRIPT TWO}",
                self.unaryOperatorClicked)
        self.reciprocalButton = self.createButton("1/x",
                self.unaryOperatorClicked)
        self.equalButton = self.createButton("=", self.equalClicked)

        mainLayout = QGridLayout()
        mainLayout.setSizeConstraint(QLayout.SetFixedSize)

        mainLayout.addWidget(self.display, 0, 0, 1, 6)
        mainLayout.addWidget(self.backspaceButton, 1, 0, 1, 2)
        mainLayout.addWidget(self.clearButton, 1, 2, 1, 2)
        mainLayout.addWidget(self.clearAllButton, 1, 4, 1, 2)

        mainLayout.addWidget(self.clearMemoryButton, 2, 0)
        mainLayout.addWidget(self.readMemoryButton, 3, 0)
        mainLayout.addWidget(self.setMemoryButton, 4, 0)
        mainLayout.addWidget(self.addToMemoryButton, 5, 0)

        for i in range(1, Calculator.NumDigitButtons):
            row = ((9 - i) / 3) + 2
            column = ((i - 1) % 3) + 1
            mainLayout.addWidget(self.digitButtons[i], row, column)

        mainLayout.addWidget(self.digitButtons[0], 5, 1)
        mainLayout.addWidget(self.pointButton, 5, 2)
        mainLayout.addWidget(self.changeSignButton, 5, 3)

        mainLayout.addWidget(self.divisionButton, 2, 4)
        mainLayout.addWidget(self.timesButton, 3, 4)
        mainLayout.addWidget(self.minusButton, 4, 4)
        mainLayout.addWidget(self.plusButton, 5, 4)

        mainLayout.addWidget(self.squareRootButton, 2, 5)
        mainLayout.addWidget(self.powerButton, 3, 5)
        mainLayout.addWidget(self.reciprocalButton, 4, 5)
        mainLayout.addWidget(self.equalButton, 5, 5)
        self.setLayout(mainLayout)

        self.setWindowTitle("Calculator")

    def digitClicked(self):
        clickedButton = self.sender()
        digitValue = int(clickedButton.text())

        if self.display.text() == '0' and digitValue == 0.0:
            return

        if self.waitingForOperand:
            self.display.clear()
            self.waitingForOperand = False

        self.display.setText(self.display.text() + str(digitValue))

    def unaryOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if clickedOperator == "Sqrt":
            if operand &lt; 0.0:
                self.abortOperation()
                return

            result = math.sqrt(operand)
        elif clickedOperator == u"x\N{SUPERSCRIPT TWO}":
            result = math.pow(operand, 2.0)
        elif clickedOperator == "1/x":
            if operand == 0.0:
                self.abortOperation()
                return

            result = 1.0 / operand

        self.display.setText(str(result))
        self.waitingForOperand = True

    def additiveOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.sumSoFar))
        else:
            self.sumSoFar = operand

        self.pendingAdditiveOperator = clickedOperator
        self.waitingForOperand = True

    def multiplicativeOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
        else:
            self.factorSoFar = operand

        self.pendingMultiplicativeOperator = clickedOperator
        self.waitingForOperand = True

    def equalClicked(self):
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.pendingAdditiveOperator = ''
        else:
            self.sumSoFar = operand

        self.display.setText(str(self.sumSoFar))
        self.sumSoFar = 0.0
        self.waitingForOperand = True

    def pointClicked(self):
        if self.waitingForOperand:
            self.display.setText('0')

        if "." not in self.display.text():
            self.display.setText(self.display.text() + ".")

        self.waitingForOperand = False

    def changeSignClicked(self):
        text = self.display.text()
        value = float(text)

        if value &gt; 0.0:
            text = "-" + text
        elif value &lt; 0.0:
            text = text[1:]

        self.display.setText(text)

    def backspaceClicked(self):
        if self.waitingForOperand:
            return

        text = self.display.text()[:-1]
        if not text:
            text = '0'
            self.waitingForOperand = True

        self.display.setText(text)

    def clear(self):
        if self.waitingForOperand:
            return

        self.display.setText('0')
        self.waitingForOperand = True

    def clearAll(self):
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''
        self.display.setText('0')
        self.waitingForOperand = True

    def clearMemory(self):
        self.sumInMemory = 0.0

    def readMemory(self):
        self.display.setText(str(self.sumInMemory))
        self.waitingForOperand = True

    def setMemory(self):
        self.equalClicked()
        self.sumInMemory = float(self.display.text())

    def addToMemory(self):
        self.equalClicked()
        self.sumInMemory += float(self.display.text())

    def createButton(self, text, member):
        button = Button(text)
        button.clicked.connect(member)
        return button

    def abortOperation(self):
        self.clearAll()
        self.display.setText("####")

    def calculate(self, rightOperand, pendingOperator):
        if pendingOperator == "+":
            self.sumSoFar += rightOperand
        elif pendingOperator == "-":
            self.sumSoFar -= rightOperand
        elif pendingOperator == u"\N{MULTIPLICATION SIGN}":
            self.factorSoFar *= rightOperand
        elif pendingOperator == u"\N{DIVISION SIGN}":
            if rightOperand == 0.0:
                return False

            self.factorSoFar /= rightOperand

        return True


if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)
    calc = Calculator()
    calc.show()
    sys.exit(app.exec_())
&lt;/pre&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>網際 Brython 3.3.4 程式執行環境</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/40623146-brython-editor-334.html" rel="alternate"></link><published>2017-10-03T11:00:00+08:00</published><updated>2017-10-03T11:00:00+08:00</updated><author><name>40623146</name></author><id>tag:cpa.kmol.info,2017-10-03:/40623146/doc/trunk/blog/40623146-brython-editor-334.html</id><summary type="html">&lt;p&gt;Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇 "Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

def clear_container(ev):
    doc["container"].clear()

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
doc['clear_container'].bind('click',clear_container)

&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;
&lt;div id="container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''#jansen 多連桿機構驗算
from math import pi, cos, sin, sqrt, acos

radian = 180/pi
degree = pi/180

#PLAP
def plap(ax, ay, ac, bac, bx, by, ccw):
    if ccw == 1:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy

#PLLP
def pllp(ax, ay, ac, cb, bx, by, cw):
    if cw == 1:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

ax = -38
ay = 0
# b 為原點
bx = 0
by = 0
cx = 0
cy = 7.8
# m 為配合 PLAP 新增固定點
mx = 30
my = 7.8
# dcm ccw 方向角度
dcm = 30*degree
cd = 15
# 三角形 dcm 為 ccw plap d=(a, cd, dcm, m)
dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1)
print("dx=", dx, "dy=", dy)
# 三角形 aed 為 cw pllp e=(a, ae, ed, d)
ae = 41.5
ed = 50
ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1)
print("ex=", ex, "ey=", ey)
# 三角形 afe 為 cw pllp f=(a, af, fe, e)
af = 40.1
fe = 55.8
fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1)
print("fx=", fx, "fy=", fy)
# 三角形 dha 為 cw pllp h=(d, dh, ha, a)
dh = 61.9
ha = 39.3
hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1)
print("hx=", hx, "hy=", hy)
# 三角形 hgf 為 cw pllp g=(h, hg, gf, f)
hg = 36.7
gf = 39.4
gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1)
print("gx=", gx, "gy=", gy)
# 三角形 hkg 為 cw pllp k=(h, hk, kg, g)
hk = 49
kg = 65.7
kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1)
print("kx=", kx, "ky=", ky)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex3"&gt;ex3&lt;/a&gt;-多連桿機構&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def jansen(e):
    data = open("./../python_ex/jansen.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["jansen"].bind("click", jansen)
&lt;/script&gt;

&lt;!-- python3 tutorial1 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial1(e):
    data = open("./../python_ex/python3_tutorial1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial1"].bind("click", tutorial1)
&lt;/script&gt;

&lt;!-- python3 tutorial2 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial2(e):
    data = open("./../python_ex/python3_tutorial2.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial2"].bind("click", tutorial2)
&lt;/script&gt;

&lt;!-- python3 tutorial3 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial3(e):
    data = open("./../python_ex/python3_tutorial3.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial3"].bind("click", tutorial3)
&lt;/script&gt;

&lt;!-- python3 tutorial4 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial4(e):
    data = open("./../python_ex/python3_tutorial4.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial4"].bind("click", tutorial4)
&lt;/script&gt;

&lt;!-- python3 tutorial5 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial5(e):
    data = open("./../python_ex/python3_tutorial5.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial5"].bind("click", tutorial5)
&lt;/script&gt;

&lt;!-- python3 tutorial6 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial6(e):
    data = open("./../python_ex/python3_tutorial6.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial6"].bind("click", tutorial6)
&lt;/script&gt;

&lt;!-- python3 tutorial7 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial7(e):
    data = open("./../python_ex/python3_tutorial7.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial7"].bind("click", tutorial7)
&lt;/script&gt;

&lt;p&gt;&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="jansen"&gt;jansen.py&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="tutorial1"&gt;tutorial1&lt;/button&gt;&lt;button id="tutorial2"&gt;tutorial2&lt;/button&gt;&lt;button id="tutorial3"&gt;tutorial3&lt;/button&gt;&lt;button id="tutorial4"&gt;tutorial4&lt;/button&gt;&lt;button id="tutorial5"&gt;tutorial5&lt;/button&gt;&lt;button id="tutorial6"&gt;tutorial6&lt;/button&gt;&lt;button id="tutorial7"&gt;tutorial7&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;Jansen 多連桿機構尺寸圖:&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/jansen_sympy.png" width="800" /&gt;&lt;/p&gt;</content><category term="2017fall"></category><category term="cp"></category><category term="brython"></category><category term="w4"></category></entry><entry><title>2017 Fall CP 第三週 - 視窗命令列與 Fossil SCM 常用指令</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w3.html" rel="alternate"></link><published>2017-09-27T11:00:00+08:00</published><updated>2017-09-27T11:00:00+08:00</updated><author><name>40623146</name></author><id>tag:cpa.kmol.info,2017-09-27:/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w3.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;首先要介紹基本的視窗命令提示指令 (Command Prompt Commands), 接著說明如何 clone 帶有網誌與投影片架構檔案的倉儲, 並且複製到各學員的倉儲後, 提交推送到遠端倉儲伺服器.&lt;/p&gt;
&lt;p&gt;啟視窗操作系統中的命令提示指令視窗時, &amp;gt; 符號左側將顯示目前所處的磁碟代號區, 以及所在的目錄, 例如:&lt;/p&gt;
&lt;p&gt;1
C:&gt;
表示目前位於 C: 的 \ 目錄, 而 C: 表示代號為 C 的磁碟槽, 而 \ 就是根目錄.&lt;/p&gt;
&lt;p&gt;若是:&lt;/p&gt;
&lt;p&gt;1
C:\tmp\fossil\wd\4062&amp;gt;
表示目前位於 C: 的 \tmp\fossil\wd\4062 目錄.&lt;/p&gt;
&lt;p&gt;若要回到 C: 的根目錄：&lt;/p&gt;
&lt;p&gt;1
2
C:\tmp\fossil\wd\4062&amp;gt;cd \
C:&gt;
若要在 C:\ 目錄下建立 4062 目錄，然後更換目錄 (cd 或 chdir) 到 4062:&lt;/p&gt;
&lt;p&gt;1
2
3
C:&gt;mkdir 4062
C:&gt;cd 4062
C:\4062&amp;gt;
若要連續跳往上一層目錄：&lt;/p&gt;
&lt;p&gt;1
2
3
C:\tmp\fossil\wd\4062&amp;gt;cd ..
C:\tmp\fossil\wd&amp;gt;cd ..
C:\tmp\fossil&amp;gt;
Cd chdir 指令的縮寫指令, change directory 更換目錄&lt;/p&gt;
&lt;p&gt;Chdir change directory 更換目錄&lt;/p&gt;
&lt;p&gt;Cls clear screen 刷新螢幕&lt;/p&gt;
&lt;p&gt;Del delete files 刪除檔案&lt;/p&gt;
&lt;p&gt;Dir display current directory content 列出目錄內容&lt;/p&gt;
&lt;p&gt;Echo 回傳字串內容&lt;/p&gt;
&lt;p&gt;Edit 編輯檔案&lt;/p&gt;
&lt;p&gt;Exit 退出命令提示列&lt;/p&gt;
&lt;p&gt;Ipconfig 列出 Internet Protocol 設定內容&lt;/p&gt;
&lt;p&gt;Md make directory 的縮寫命令&lt;/p&gt;
&lt;p&gt;Mkdir make directory 建立目錄&lt;/p&gt;
&lt;p&gt;Move 移動檔案&lt;/p&gt;
&lt;p&gt;Net 顯示或設定網路相關內容&lt;/p&gt;
&lt;p&gt;Netstat 列出使用中的網路連線&lt;/p&gt;
&lt;p&gt;Nslookup name server lookup&lt;/p&gt;
&lt;p&gt;Path 列出或設定指令搜尋路徑&lt;/p&gt;
&lt;p&gt;Ping 向其他電腦送出 Internet Control Message Protocol (ICMP) Echo Request&lt;/p&gt;
&lt;p&gt;Rd remove directory 移除目錄縮寫指令&lt;/p&gt;
&lt;p&gt;Ren rename 更改檔案名稱&lt;/p&gt;
&lt;p&gt;Rmdir remove directory&lt;/p&gt;
&lt;p&gt;Set 顯示或設定環境變數&lt;/p&gt;
&lt;p&gt;Start 執行命令同時開啟另一命令列視窗&lt;/p&gt;
&lt;p&gt;Subst ｓｕｂｓｔｉｔｕｔｅ　以磁碟代號對應某一目錄&lt;/p&gt;
&lt;p&gt;Taskkill 終止特定命令執行&lt;/p&gt;
&lt;p&gt;Tracert sends Internet Control Message Protocol (ICMP) Echo Request messages to a specified remote computer with increasing Time to Live (TTL) field values and displays the IP address and hostname, if available, of the router interfaces between the source and destination.&lt;/p&gt;
&lt;p&gt;clone cpb 主機上的 4062 倉儲
甲班的 fossil scm 主機符號名稱為 cpa.kmol.info 而乙班則為 cpb.kmol.info, 接下來要將遠端 cpb.kmol.info 主機上的 4062 倉儲複製到近端, 因為主要是取得 4062 倉儲的內容, 而非事後要修改版本內容, 因此 clone 時不綁定帳號:&lt;/p&gt;
&lt;p&gt;1
Y:\tmp\fossil&amp;gt;fossil clone https://cpb.kmol.info/4062 4062.fossil
接下來建立一個 wd (working directory, 工作目錄) 目錄, 之後會將各倉儲壓縮檔解開到 wd 目錄下, 並且每個倉儲各自解開到, 以倉儲名稱命名的目錄區, 以便區別. 接著在 wd 目錄下, 再建立 4062 目錄, 更換目錄到 4062 目錄之後, 再以 fossil open 開啟倉儲內容至 4062 目錄中.&lt;/p&gt;
&lt;p&gt;1
2
3
4
Y:\tmp\fossil&amp;gt;mkdir wd
Y:\tmp\fossil&amp;gt;cd wd
Y:\tmp\fossil\wd&amp;gt;mkdir 4062
Y:\tmp\fossil\wd\4062&amp;gt;fossil open ./../../4062.fossil
clone 學員倉儲時綁定帳號
接下來要利用 fossil clone 複製遠端各學員的倉儲, 但在 clone 時就綁定帳號, clone 結束後將在 wd 目錄下建立與倉儲名稱相同的目錄, 並再用 fossil open 將倉儲開啟在工作目錄中．假設學員學號為 406123&lt;/p&gt;
&lt;p&gt;1
2
3
4
5
Y:\tmp\fossil&amp;gt;fossil clone https://406123@cpb.kmol.info/406123 406123.fossil
password for 406123:
Y:\tmp\fossil&amp;gt;cd wd
Y:\tmp\fossil\wd&amp;gt;mkdir 406123
Y:\tmp\fossil\wd\406123&amp;gt;fossil open ./../../406123.fossil
接下來就可以將 4062 倉儲中解開的內容, 除了 FOSSIL 與 pycache 兩個目錄不要複製外, 其餘包含網誌與投影片架構的檔案放入各學員開啟後的倉儲目錄中, 然後新增所有檔案, 並且提交後自動推回遠端, 同時近端的 406123.fossil 也將與遠端及工作目錄中的內容保持同步.&lt;/p&gt;
&lt;p&gt;1
2
Y:\tmp\fossil\wd\406123&amp;gt;fossil add .
Y:\tmp\fossil\wd\406123&amp;gt;fossil commit -m "add blog and reveal files"
clone 學員倉儲時未綁定帳號
假如在 fossil clone 時未能綁定帳號, 則隨後的新增與提交無法自動推送, 必須指定用戶帳號, 以手動推送.&lt;/p&gt;
&lt;p&gt;1
2
3
4
5
Y:\tmp\fossil&amp;gt;fossil clone https://cpb.kmol.info/406123 406123.fossil
password for 406123:
Y:\tmp\fossil&amp;gt;cd wd
Y:\tmp\fossil\wd&amp;gt;mkdir 406123
Y:\tmp\fossil\wd\406123&amp;gt;fossil open ./../../406123.fossil
複製 4062 倉儲內容時, 記得不要複製 FOSSIL 與 pycache 兩個目錄．接著就可以新增並且提交, 但 fossil 會顯示自動推送失敗, 因為之前 fossil clone 時沒有綁定帳號. 新增提交後必須手動推送.&lt;/p&gt;
&lt;p&gt;1
2
3
Y:\tmp\fossil\wd\406123&amp;gt;fossil add .
Y:\tmp\fossil\wd\406123&amp;gt;fossil commit -m "add blog and reveal files"
Y:\tmp\fossil\wd\406123&amp;gt;fossil push https://406123@cpb.kmol.info/406123
完成將 blog 與 reveal 投影片送到 cpb.kmol.info 後, 可以透過各學員倉儲下的 /doc/trunk/index.html 檢視最新版投影片, 從 /doc/trunk/blog/index.html 檢視最新版的網誌. 若要查看舊版的資料, 可以將 trunk 換成版次號碼.&lt;/p&gt;
&lt;p&gt;https://cpb.kmol.info/4062/doc/trunk/blog/index.html 就是 4062 倉儲最新版網誌, 而 https://cpb.kmol.info/4062/doc/efd9e81386f5ff32/blog/index.html 就是版本號碼為 efd9e81386f5ff32 的舊版本網誌.&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>2017 Fall CP 第二週</title><link href="https://cpa.kmol.info/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w2.html" rel="alternate"></link><published>2017-09-20T11:00:00+08:00</published><updated>2017-09-20T11:00:00+08:00</updated><author><name>40623146</name></author><id>tag:cpa.kmol.info,2017-09-20:/40623146/doc/trunk/blog/40623146_2017-fall-cadp-w2.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;@edit 20170920.md @language md Title: 2017 Fall CP 第二週 Date: 2017-09-20 11:00 Category: Course Tags: 2017fall, CADP Slug: 40623146_2017-fall-cadp-w2 Author: 40623146&lt;/p&gt;
&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;測試沒有綁定帳號後, 指定帳號新增提交推送版本.&lt;/p&gt;
&lt;p&gt;測試 commit 時沒有 --user-override 4062&lt;/p&gt;
&lt;p&gt;測試 push 才綁帳號&lt;/p&gt;
&lt;p&gt;configuration - 組成內容與狀態&lt;/p&gt;
&lt;p&gt;scm - software configuration management&lt;/p&gt;
&lt;p&gt;batch - 批次&lt;/p&gt;
&lt;p&gt;remark - 註解&lt;/p&gt;
&lt;p&gt;default - 內定, 默認&lt;/p&gt;
&lt;p&gt;fossil clone - 克隆&lt;/p&gt;
&lt;p&gt;fossil add - 新增&lt;/p&gt;
&lt;p&gt;fossil commit - 提交&lt;/p&gt;
&lt;p&gt;fossil push - 推送&lt;/p&gt;
&lt;p&gt;fossil remote-url off&lt;/p&gt;
&lt;p&gt;fossil ui - user interface&lt;/p&gt;
&lt;p&gt;url - uniform resource locator&lt;/p&gt;
&lt;p&gt;https - secure hypertext transfer protocol&lt;/p&gt;
&lt;p&gt;protocol - 協定&lt;/p&gt;
&lt;p&gt;certification - 簽章 - public key server&lt;/p&gt;
&lt;p&gt;certify - 認證&lt;/p&gt;
&lt;p&gt;vacuum - 吸塵&lt;/p&gt;
&lt;p&gt;fossil clone https://mde1a1.kmol.info/pymcadp pymcadp.fossil&lt;/p&gt;
&lt;p&gt;IDE - Integrated Development Environment&lt;/p&gt;
&lt;p&gt;希望為每位學員建立倉儲的設想流程如下:&lt;/p&gt;
&lt;p&gt;各學員可以獨立維護倉儲內容, 也可以在總管理員的權限下, 為分組學員建立帳號, 逐步導入協同設計
各學員的倉儲以修課班級命名伺服器, 以學號命名倉儲, 方便依照此一規律擷取各學員的倉儲頁面.
各學員能以電子郵件收到與新建倉儲相關的連結, 以及帳號密碼.
必須擴增 Ubuntu ulimits -n 同時開檔的設限範圍 (內定只允許同時開啟 1024 個檔案)
解決方案:&lt;/p&gt;
&lt;p&gt;主機名稱可以透過 domain dns 中的 CNAME 別名方式處理, 因為目前所能提供出來的 IPv4/IPv6 雙支援主機, 之前已經都設定了符號名稱.
fossil init 雖然提供指定管理者的 -A 選項功能, 但是無法直接指定管理者對應密碼, 因此必須建立倉儲之後, 再利用 fossil user 修改密碼, 之後再利用 Gmail 寄出通知信, 其中提供倉儲連結, 登入帳號與密碼等資訊.
建立各學員倉儲檔案的程式如下, 如前所述, 主要透過兩個 Fossil SCM 指令完成, 在 Windows 採用 Fossil SCM 2.3 版建立所有 .fossil 倉儲時, 將同時以 email 通知各學員. 各學員的 .fossil 檔案再以 sftp 送到伺服主機對應帳號所屬的目錄下. 必須要特別注意的是, 採用 Fossil SCM 2.3 版所建立的 .fossil 倉儲檔案, 在 Ubuntu 操作系統上也必須採用相同版本的 fossil, 否則舊版 fossil 可能無法開啟新版 fossil 程式所建立的倉儲檔.&lt;/p&gt;
&lt;pre class="brush: python"&gt; import os import string import random

使用 Gmail 寄信必須導入下列模組
import smtplib import re from email.mime.text import MIMEText
from email.header import Header

用來以亂數建立密碼的韓式
def id_generator(size=6, chars=string.ascii_uppercase + string.digits): ''' source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python ''' return ''.join(random.choice(chars) for _ in range(size))

讀取學員名單, 逐一取得學員學號, 學員名單, 檢查點 1/7
student_data = open("2017fall_list/1b.txt").read() student_list = student_data.splitlines()

利用 gmail smtp 功能寄信
server = smtplib.SMTP('smtp.gmail.com:587') server.ehlo() server.starttls()

以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7
''' 寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限 否則無法使用程式寄信! '''

從外部檔案讀取要用來寄信的 gmail 帳號與密碼
mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7
email_data = open("z:/2017fall/mail.txt").read() email, email_password= email_data.split(",") print(email, email_password)

是否登入所提供寄信的電子郵箱, 4/7
server.login(email, email_password)

不同課程名稱, 與對應主機名稱, 必須配合修改 5/7
course_title = "計算機程式" fossil_server = "cpb.kmol.info"

for student_num in student_list: username = student_num repository = username + '.fossil' # 利用所提供的字串, 以亂數組成六個字元的密碼 password = id_generator(6, "23456789abcdef") print(student_num, ", " , password)

# 執行 dos command 指令, 建立倉儲
os.system("fossil init -A " +username + " " + repository)
print("已經建立倉儲 " + repository)

# 執行 dos command 指令, 修改使用者密碼
os.system("fossil user password " + username + " " + password + " -R " + repository)
print("已經修改密碼")

# 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼
# 每一位學員收到的 output 都從這裡 reset
output = ""
# 若學號欄為空, 則不寄信
if student_num != "":
    # output 為寄給每一位學員的資料表格
    mail_content = student_num+' 您好: &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; 您在 '+course_title+' 課程中的區域網路倉儲: &amp;lt;a href="https://'+fossil_server+'/'+student_num+'"&amp;gt;https://'+fossil_server+'/'+student_num+'&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;'
    mail_content += '管理帳號為:'+ student_num + '&amp;lt;br /&amp;gt; 管理密碼為: '+ password+'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;'
    print(student_num)
    print(mail_content)
    # 至此 mail_content 已經確定
    # 在測試與實際寄送資料, 也必須配合修改, 檢查點  6/7
    receiver_email = student_num + "@gm.nfu.edu.tw"
    # 測試用
    #receiver_email = student_num+"@mde.tw"
    # 列出收信人 email 位址
    #print(receiver_email)
    #message= MIMEText(mail_content,'plain','UTF-8')
    # 以 html 格式寄信
    message= MIMEText(mail_content,'html','UTF-8')
    message['Subject'] = Header(course_title+" Fossil SCM 帳號通知", 'UTF-8') 
    # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7
    server.sendmail("gmail_address", receiver_email, message.as_string())
server.quit() &lt;/pre&gt;

&lt;p&gt;各班所完成的主機:&lt;/p&gt;
&lt;p&gt;二甲電腦輔助設計實習: &lt;a href="https://cadpa.kmol.info"&gt;https://cadpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二乙電腦輔助設計實習: &lt;a href="https://cadpb.kmol.info"&gt;https://cadpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一甲計算機程式: &lt;a href="https://cpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一乙計算機程式: &lt;a href="https://cpb.kmol.info"&gt;https://cpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Date: 2017-09-20 11:00 Category: Course Tags: 2017fall, CP Slug: 40623146_2017-fall-cadp-w2 Author: 40623146&lt;/p&gt;
&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry></feed>